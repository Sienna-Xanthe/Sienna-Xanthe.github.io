<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Sienna-Xanthe.github.io</id>
    <title>Gridea</title>
    <updated>2022-01-13T10:14:06.942Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Sienna-Xanthe.github.io"/>
    <link rel="self" href="https://Sienna-Xanthe.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Sienna-Xanthe.github.io/images/avatar.png</logo>
    <icon>https://Sienna-Xanthe.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[jvm入门]]></title>
        <id>https://Sienna-Xanthe.github.io/post/jvm-ru-men/</id>
        <link href="https://Sienna-Xanthe.github.io/post/jvm-ru-men/">
        </link>
        <updated>2022-01-11T09:21:07.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Sienna-Xanthe.github.io/post-images/1641893687358.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a009e0cc-e4ee-4e0e-af08-28fed665bf78/Untitled.png" alt="Untitled" loading="lazy"></figure>
<h1 id="1-类加载器">1. 类加载器</h1>
<ul>
<li><strong>启动类加载器（Bootstrap Class Loader）</strong></li>
</ul>
<pre><code>该类加载器使用C++实现，是虚拟机自身的一部分，负责加载存放在&lt;JAVA_HOME&gt;\lib目录下，或者被 -Xbootclasspath 参数所指定路径中存放的，而且是Java虚拟机能够识别的类库加载到虚拟机的内存中。
</code></pre>
<ul>
<li>
<p><strong>扩展类加载器（Extension Class Loader）</strong></p>
<p>该类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。负责加载&lt;JAVA_HOME&gt;\lib\ext 目录中，或者被 java.ext.dirs 系统变量所指定的路径中所有的类库。</p>
</li>
<li>
<p><strong>应用程序类加载器（Application Class Loader）</strong></p>
<p>该类加载器由sun.misc.Launcher$AppClassLoader 来实现。（系统类加载器）。负责加载用户类路径（ClassPath）上所有的类库。</p>
</li>
</ul>
<h1 id="2-双亲委派模型">2. 双亲委派模型</h1>
<figure data-type="image" tabindex="3"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6c16d5a6-3a89-4f45-bbd4-b5b09a7af6a3/Untitled.png" alt="Untitled" loading="lazy"></figure>
<ul>
<li>
<p><strong>工作过程</strong></p>
<p>如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围内没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>
</li>
<li>
<p><strong>类加载的过程</strong></p>
<figure data-type="image" tabindex="4"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cdc41688-6cc5-4703-97dd-49d8ffdb374d/Untitled.png" alt="Untitled" loading="lazy"></figure>
<ol>
<li>
<p>加载 （Loading）</p>
<p>负责找到待加载类的二进制class文件，并把它以bytecode的形式装载到虚拟机。在这个过程中，JVM会给这个类分配一个基本的内存结构，但是方法，变量域，和它引用到其他类在这个阶段都还没有处理，也就是说在目前这个阶段还不可用。</p>
</li>
<li>
<p>链接（Linking）</p>
<p>1）字节码验证（Verifying）</p>
<p>验证字节码是否是一个正确，符合规范的类字节码</p>
<p>2）类准备（Preparing）</p>
<p>为这个类定义好必须的数据结构以表示成员变量域，方法，以及实现的接口等等</p>
<p>3）解析（Resolving）</p>
<p>把这个类锁引用的其他类全部加载进来，引用的方式如下：</p>
<p>继承、实现接口、域变量、方法定义、方法中定义的本地变量</p>
</li>
<li>
<p>初始化（Initializing）</p>
<p>执行类中定义的静态代码块，初始化静态变量为默认值</p>
<figure data-type="image" tabindex="5"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/134d2f1a-5b31-4b8e-858d-ddb383f16cb4/Untitled.png" alt="Untitled" loading="lazy"></figure>
</li>
</ol>
</li>
<li>
<p><strong>模型的好处</strong></p>
<ol>
<li>向上让启动类加载器最先加载，保证了引用的核心基础类（如 String、Integer 等等）都是由启动类加载器加载的（都是在核心Java API找到的这个类），防止了核心API 库被随意篡改，保证了核心类在程序的各种类加载器环境中都是同一个类，提高了安全性。</li>
<li>避免了重复加载类，如果父加载器已经加载过了，那么子类就没有必要再加载一次了。</li>
</ol>
</li>
<li>
<p><strong>双亲委派的实现</strong></p>
<pre><code class="language-java">protected Class&lt;?&gt; loadClass(String name, boolean resolve)
        throws ClassNotFoundException
    {
											//返回用于类加载操作的锁对象
        synchronized (getClassLoadingLock(name)) {
            // 首先，检查该类是否已经被加载:如果这个加载器被Java虚拟机记录为
//具有该二进制名称的类的启动加载器，则返回具有给定二进制名称的类。否则返回null。
            Class&lt;?&gt; c = findLoadedClass(name);
            if (c == null) {
                long t0 = System.nanoTime();
                try {
                    if (parent != null) {
                        c = parent.loadClass(name, false);
                    } else {
                        c = findBootstrapClassOrNull(name);
												//返回一个由bootstrap类加载器加载的类；如果没有找到，则返回null。
                    }
                } catch (ClassNotFoundException e) {
                    // 如果没有从非空的父类加载器中找到类，则抛出ClassNotFoundException。
                }

                if (c == null) {
                    // 如果仍未找到，则调用findClass，以找到该类。
                    long t1 = System.nanoTime();
                    c = findClass(name);

                    // 这是定义类的加载器；记录统计信息
                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                    sun.misc.PerfCounter.getFindClasses().increment();
                }
            }
            if (resolve) {
                resolveClass(c);
            }
            return c;
        }
    }
</code></pre>
<p>代码逻辑：</p>
<p>先检查请求加载的类型是否已经加载过，若没有则调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父类加载器加载失败，抛出ClassNotFoundException 异常的话，才调用自己的findClass() 方法尝试进行加载。</p>
</li>
<li>
<p><strong>破坏双亲委派模型</strong></p>
<ul>
<li>
<p>为什么？</p>
<p>在某些情况下父类加载器需要委托子类加载器去加载class文件。收到加载范围的限制，父类加载器无法加载到需要的文件。</p>
<blockquote>
<p>以Driver接口为例，由于Driver接口定义在jdk当中的，而其实现由各个数据库的服务商来提供，比如mysql的就写了<code>MySQL Connector</code>，那么问题就来了，DriverManager（也由jdk提供）要加载各个实现了Driver接口的实现类，然后进行管理，但是DriverManager由启动类加载器加载，只能记载JAVA_HOME的lib下文件，而其实现是由服务商提供的，由系统类加载器加载，这个时候就需要启动类加载器来委托子类来加载Driver实现，从而破坏了双亲委派，这里仅仅是举了破坏双亲委派的其中一个情况。</p>
</blockquote>
</li>
<li>
<p>怎么办？</p>
<p>重写ClassLoader 类中的loadClass() 方法。</p>
<p>但是要注意的点是，Object.class 是对象的顶级类，改变类的类加载器的时候要注意，如果全部改了，Object.class就找不到了，加载不了。</p>
<p>所以在重写的时候要注意分类解决，把想要通过自定义类加载器加载的和想通过默认类加载器加载的分隔开。</p>
<blockquote>
<p>如果不想打破双亲委派模型，就重写ClassLoader类中的findClass()方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。<br>
而如果想打破双亲委派模型则需要重写ClassLoader类loadClass()方法（当然其中的坑也不会少）。典型的打破双亲委派模型的框架和中间件有tomcat与osgi。</p>
</blockquote>
</li>
<li>
<p>关于破坏双亲委派模型的示例（如tomcat、osgi）</p>
<p>待补充......</p>
</li>
</ul>
</li>
</ul>
<h1 id="3java栈">3.Java栈</h1>
<ul>
<li>
<p><strong>基本结构</strong></p>
<figure data-type="image" tabindex="6"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a009e0cc-e4ee-4e0e-af08-28fed665bf78/Untitled.png" alt="Untitled" loading="lazy"></figure>
</li>
<li>
<p><strong>程序计数器（Program Counter Register）</strong></p>
<p>它是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>每条线程都有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，称这类内存区域为“线程私有”的内存。</p>
<p>如果线程正在执行的是一个java方法，这个计数器记录的正式执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。</p>
</li>
<li>
<p><strong>Java虚拟机栈（Java Virtual Machine Stack）</strong></p>
<p>它也是线程私有，它的生命周期与线程相同。它描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
<p>如下图所示：</p>
<figure data-type="image" tabindex="7"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6e37bcef-c3db-4c13-9645-9e9af18e305d/Untitled.png" alt="Untitled" loading="lazy"></figure>
<ul>
<li>
<p>局部变量表</p>
<p>存放了编译期可知的各种Java虚拟机<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、double、long）、<strong>对象引用</strong>（reference类型，它并不等同于对象本身，可能是一个只想对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和<strong>returnAddress类型</strong>（指向了一条字节码指令的地址）。</p>
<p>这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）来表示，其中64位的长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。在方法运行期间不会改变局部变量表的大小（变量槽的数量），因为在编译期间就完成了空间的分配。</p>
</li>
<li>
<p>操作数栈</p>
<ol>
<li>它是出栈（弹栈）和压栈来访问的。可以理解为它是Java虚拟机栈中一个用于计算临时数据存储区。</li>
<li>操作数栈中的byte、short、char 压栈前（bipush）会转为int。</li>
<li>数据运算的地方，大多数指令都在操作数栈弹栈运算，然后结果压栈。</li>
</ol>
</li>
<li>
<p>动态连接</p>
<ol>
<li>指被调用的目标方法在编译器无法被确定下来，只能够在程序运行期将方法的符号引用转换为直接引用，这种引用转换的过程具备动态性。</li>
<li>后面详细介绍</li>
</ol>
</li>
</ul>
</li>
<li>
<p><strong>本地方法栈（Native Method Stacks）</strong></p>
<p>它与Java虚拟机栈的作用都是相似的，区别在于虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>
</li>
<li>
<p><strong>Java堆（Java Heap）</strong></p>
<p>它是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例。</p>
<ul>
<li>关于在堆里面进行的垃圾回收机制后面详细介绍</li>
</ul>
</li>
<li>
<p><strong>方法区（Method Area）</strong></p>
<p>方法区与Java堆一样，是各个线程共享区域，它作用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。对于方法区的约束除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，甚至还可以选择不实现垃圾收集。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收效果是比较难令人满意，尤其是类型的卸载，条件相当苛刻，但是有时又是有必要的。</p>
</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/825a9c4a-8c7b-4ad5-8fb5-e2264c940723/Untitled.png" alt="Untitled" loading="lazy"></figure>
<h1 id="4垃圾回收机制">4.垃圾回收机制</h1>
<ul>
<li><strong>判断对象已经“死去”？</strong>
<ul>
<li>
<p><strong>引用计数法（Reference Counting）</strong></p>
<p>实现原理：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p>
<p>在Java虚拟机里没有选用该方法来管理内存，原因是这个算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间互相循环引用的问题。</p>
</li>
<li>
<p><strong>可达性分析算法（Reachability Analysis）</strong></p>
<ol>
<li>实现原理：通过一系列称为“GC Roots” 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某对象不可达时，则证明此对象时不可能再被使用的。</li>
</ol>
<figure data-type="image" tabindex="9"><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/35953e1e-567a-4c19-bfb6-461cbc633da8/Untitled.png" alt="Untitled" loading="lazy"></figure>
<p>如上图所示，尽管object5、6、7 是相关联的，但是由于没有和GC Roots 相关联，不可达，因此5、6、7 将会判定为可回收对象。</p>
<p>由此，就解决了引用计数法中的bug（循环引用的两个对象不会被回收）。当一个方法已经结束了，就不在与GC Roots 可达了，所以就被判定为可回收对象。</p>
<ol>
<li>在Java 技术体系里面，固定可作为GC Roots 的对象包括以下几种：
<ol>
<li>在虚拟机栈（栈帧中的本地变量表） 中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</li>
<li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</li>
<li>在方法去中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li>
<li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li>
<li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointException、OutOfMemoryError）等，还有系统类加载器。</li>
<li>所有被同步锁（synchronized 关键字）持有的对象。</li>
<li>反应Java虚拟机内部情况的JMXBean、JVMTI 中注册的回调、本地代码缓存等。</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li><strong>引用的定义</strong>
<ul>
<li>
<p>强引用</p>
<p>指在程序代码之中普遍存在的引用赋值，即类似“Object obj = new Object()” 这种引用关系。无论任何情况下，只要强引用关系还在，垃圾收集器就永远不会回收掉被引用的对象。</p>
</li>
<li>
<p>软引用</p>
<p>描述一些还有用，但是非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。SoftReference 类来实现软引用。</p>
</li>
<li>
<p>弱引用</p>
<p>也是描述非必须对象，强度比软引用更弱一些。被弱引用的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。WeakReference 类来实现弱引用。</p>
</li>
<li>
<p>虚引用</p>
<p>也称为“幽灵引用” 或者“幻影引用” ，最弱的一种引用关系。目的只是为了能在这个对象被收集器回收时收到一个系统通知。PhantomReference 类来实现虚引用。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Sienna-Xanthe.github.io/post/hello-gridea/</id>
        <link href="https://Sienna-Xanthe.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>